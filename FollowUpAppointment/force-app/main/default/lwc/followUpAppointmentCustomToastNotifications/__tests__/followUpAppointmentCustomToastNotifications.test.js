import { createElement } from 'lwc';
import FollowUpAppointmentCustomToastNotifications from 'c/followUpAppointmentCustomToastNotifications';

let element;
describe('c-follow-up-appointment-custom-toast-notifications', () => {
  afterEach(() => {
    // The jsdom instance is shared across test cases in a single file so reset the DOM
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  beforeEach(() => {
    element = createElement('c-follow-up-appointment-custom-toast-notifications', {
      is: FollowUpAppointmentCustomToastNotifications,
    });

    element.timeout = 3000;
    element.sticky = true;
    element.toastId = 0;
    element.closeModal = jest.fn();
    element.handleClose = jest.fn();
    element.showToast = jest.fn();

    //document.body.appendChild(element);
  });

  it('TODO: test case generated by CLI command, please fill in test logic', () => {
    // Arrange
    element = createElement('c-follow-up-appointment-custom-toast-notifications', {
      is: FollowUpAppointmentCustomToastNotifications,
    });

    // Act
    document.body.appendChild(element);

    // Assert
    // const div = element.shadowRoot.querySelector('div');
    expect(1).toBe(1);
  });

  it('Call close modal', async () => {
    //element.toastList = element.toastList2;

    let t = [
      {
        type: 'success',
        headerMessage: 'success',
        message: 'message',
        id: 1,
        iconName: 'utility:success',
        headerClass: 'slds-notify slds-notify_toast slds-theme_success',
      },
      {
        type: 'success',
        headerMessage: 'success',
        message: 'message',
        id: 3,
        iconName: 'utility:success',
        headerClass: 'slds-notify slds-notify_toast slds-theme_success',
      },
    ];
    element.toastList = [...t];
    element.sticky = true;
    document.body.appendChild(element);

    return Promise.resolve().then(() => {
      const action = element.shadowRoot.querySelector('lightning-button-icon');
      action.click();
      expect(action.handleClose).toHaveBeenCalledWith(evt2);
      // const spy = jest.spyOn(element, "handleClose");
      // console.log(spy);
      // element.dispatchEvent(new CustomEvent("click"));
      // expect(spy).toBeCalledTimes(0);
    });
  });

  it('should call moveCardDown when edit clicked', async () => {
    element.showToast();

    const methodNameFake = jest.spyOn(element, 'showToast');
    // const wrapper = mount(<MyComponent {...props} />);
    expect(methodNameFake).toHaveBeenCalledTimes(1);
    //    return Promise.resolve().then(() => {
    //       expect(element.toastId).toBe(0);
    //   });
  });
});
